- name: Setup WSL
  block:
    - name: Enable Windows Features - WSL, Container, Hyper-V
      ansible.windows.win_optional_feature:
        name: "{{ docker_desktop_windows_features }}"
        state: present
        include_parent: true
      async: 120
      poll: 5
      register: install_win_features

    - name: Reboot after activating Windows Features
      when: install_win_features.changed
      ansible.windows.win_reboot:
        reboot_timeout: 180
        post_reboot_delay: 90

    - name: Get Version of wsl
      ansible.windows.win_command:
        cmd: wsl --version
        output_encoding_override: utf-16
      changed_when: false
      failed_when: false
      async: 15
      poll: 5
      register: wsl_version_cmd

    - name: Update wsl
      ansible.windows.win_command:
        cmd: wsl --update
        output_encoding_override: utf-16
      register: wsl_update_cmd
      when:
        - "not 'WSL-Version' in wsl_version_cmd.stdout_lines"
        - "not 'Das System kann auf die Datei nicht zugreifen' in wsl_version_cmd.stderr"
      async: 90
      poll: 0
      changed_when: false
      failed_when: false
#      changed_when: "'installiert' in wsl_update_cmd.stdout"
#      failed_when: "not 'Das System kann auf die Datei nicht zugreifen' in wsl_update_cmd.stderr"

- name: Install docker-desktop
  ansible.windows.win_package:
    path: "{{ docker_desktop_download_url }}"
    arguments: install --quiet --accept-license --backend=wsl-2 --admin-settings
    product_id: "{{ docker_desktop_product_id }}"
  ignore_errors: true
  register: install_docker_desktop
  timeout: 600
  retries: 5
#  async: 180
#  poll: 10

- name: Wait for wsl update to finish
  ansible.windows.async_status:
    jid: "{{ wsl_update_cmd.ansible_job_id }}"
  register: job_result
  when:
    - wsl_update_cmd.changed
    - wsl_update_cmd.ansible_job_id is defined
  until: job_result.finished
  retries: 20
  delay: 2

- name: Add user to group 'docker-users'
  ansible.windows.win_user:
    name: "{{ ansible_user }}"
    groups: ['docker-users']
    groups_action: add

- name: Expose TCP Port
  ansible.builtin.include_tasks: helper/add_config_for_expose_tcp_port_win.yml
  when: expose_docker_tcp_port | default(expose_docker_tcp_port_default)

- name: Reboot after Docker Desktop Install / TCP Expose
  when: install_docker_desktop.changed or (install_docker_desktop.status_code == 200 and not install_docker_desktop.msg == "OK") or copy_config_file_cmd.changed | default(false)
  ansible.windows.win_reboot:
    reboot_timeout: 180
    post_reboot_delay: 90

- name: Wait till Docker Desktop is available
  ansible.windows.win_command: docker ps
  register: docker_ps_cmd
  until: docker_ps_cmd.rc == 0
  retries: 30
  delay: 2
  changed_when: false

- name: Get Container Type (Linux / Windows)
  ansible.windows.win_command: "docker info --format {%raw%}{{.OSType}}{%endraw%}"
  register: docker_info_os_type
  failed_when: false
  changed_when: false

- name: Switch to Windows Containers
  when: "'windows' not in docker_info_os_type.stdout_lines"
  ansible.windows.win_command: '"C:\\Program Files\\Docker\\Docker\\DockerCli.exe" -SwitchWindowsEngine'

- name: Register and Start Docker Engine Service
  block:
    - name: Get Status of Docker Engine Service
      ansible.windows.win_service:
        name: docker
      register: docker_service_state

    - name: Register Docker Engine Service
      ansible.windows.win_command: '"C:\Program Files\Docker\Docker\resources\dockerd.exe" --register-service'
      when: not docker_service_state.exists
      register: register_docker_service_cmd
      changed_when: register_docker_service_cmd.rc == 0
      failed_when:
        - "not 'Der angegebene Dienst ist bereits vorhanden' in register_docker_service_cmd.stdout"
        - register_docker_service_cmd.rc != 0

    - name: Start Docker Engine Service
      ansible.windows.win_service:
        name: docker
        state: started
